#!/usr/bin/python3
from manchester_code import encode

WAKEUP = b'1'*20        #11111111111111111111
PAUSE_SHORT = b'0'*26   #00000000000000000000000000
PAUSE_LONG = b'0'*376   #

# take a string of 1's 0's and convert to a list of bytes (int) for the manchester library
def stage_input(stream:str) -> list: return [int(stream[i:i+8],2) for i in range(0,len(stream),8) if int(stream[i:i+8],2) >= 1]

# take a bytestring and convert it to a string of 1's and 0's
def assemble_message(stream:str) -> str: return ''.join([bin(byte)[2::].zfill(8) for byte in stream])

# take a bit stream as a string and manchester encode it, returned as a bit stream (str)
def encode_message(stream:str) -> str: return ''.join([bin(byte)[2::].zfill(8) for byte in encode(stage_input(stream))])

def run_stager(msg_preamble:str, msg_fobid: str, msg_cmd: str, msg_rolling: str) -> int:
    """take bytstrings of command statement and stage bitstream approperiately for modulation
    param::b_str::msg_preamble  one byte, always \xFF
    param::b_str::msg_fobid     four bytes, identifier of the keyfob
    param::b_str::msg_cmd       three bytes, command code
    param::b_str::msg_rolling   six bytes, presumably the rolling code for the cipher

    return::int     length of bitstream generated"""

    wakeup_preamble = encode_message(assemble_message(b'\xFF'*14))
    message = encode_message(assemble_message(msg_preamble + msg_fobid + msg_cmd + msg_rolling)).encode()
    bitstream = WAKEUP + PAUSE_SHORT + wakeup_preamble + (PAUSE_LONG + message)*4 + PAUSE_SHORT

    with open('runtime/bitstream.bin', 'wb') as io:
        io.write(bitstream)
    return len(bitstream)

"""
20: 11111111111111111111
26: 00000000000000000000000000

224(encoded): 10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010
112(decoded): 1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
376: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

224(encoded): 10101010101010101010101010101001010110100110101010100101010110101001010110101010011001010101100101100101010101100101010101100101010101011001010110101010011010100110010101010110101010101001100101101001010110100101100101101001
112(decoded): 1111111111111110001101111100001110001111010000100100000100000100000010001111011101000001111110100110001100100110
376: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

stream = tone + pause + message + blank + message + blank + message + blank + message + blank
"""
""""
sometimes there is a message of all ones that appears to reset the rolling code
"""
